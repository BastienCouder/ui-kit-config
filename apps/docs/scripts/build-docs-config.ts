import fs from "fs";
import path from "path";
import { rimraf } from "rimraf";
import type { DocsConfig } from "@/types/docs";
import { Item, SubCategory } from "@/types/docs-nav";

const COMPONENTS_BASE_PATH = path.join(process.cwd(), "content/components");

// Function to generate navigation items recursively
const generateNavItems = (basePath: string, relativePath = ""): (Item | SubCategory)[] => {
  const items: (Item | SubCategory)[] = [];

  if (fs.existsSync(basePath)) {
    const entries = fs.readdirSync(basePath);

    entries.forEach((entry) => {
      const entryPath = path.join(basePath, entry);
      const stat = fs.statSync(entryPath);

      if (stat.isDirectory()) {
        const subItems = generateNavItems(entryPath, path.join(relativePath, entry));
        if (subItems.length > 0) {
          items.push({
            title: entry.charAt(0).toUpperCase() + entry.slice(1),
            href: "/components" + path.join("/", relativePath, entry).replace(/\\/g, "/"),
            items: subItems as Item[],
          });
        }
      } else if (stat.isFile() && path.extname(entry) === ".mdx" && entry !== "index.mdx") {
        const title = path.basename(entry, ".mdx");
        items.push({
          title: title.charAt(0).toUpperCase() + title.slice(1).replace(/-/g, " "),
          href: "/components" + path.join("/", relativePath, title).replace(/\\/g, "/"), // Ensure URLs use forward slashes
        });
      }
    });
  }

  return items;
};

// Generate the components navigation items
const componentsNavItems = generateNavItems(COMPONENTS_BASE_PATH);

const docsConfig: DocsConfig = {
  nav: [
    {
      title: "Getting Started",
      slug: "docs",
      items: [
        {
          title: "Installation",
          href: "/docs/installation",
        },
      ],
    },
    {
      title: "Components",
      slug: "components",
      items: componentsNavItems,
    },
  ],
};

const index = `
// This file is autogenerated by scripts/build-preview-imports.ts
// Do not edit this file directly.
import type { DocsConfig } from "@/types/docs";

export const docsConfig: DocsConfig = ${JSON.stringify(docsConfig, null, 2)};
`;

rimraf.sync(path.join(process.cwd(), "src", "config", "docs-config.ts"));
fs.writeFileSync(path.join(process.cwd(), "src", "config", "docs-config.ts"), index);

console.log("\x1b[32mâœ“\x1b[0m Created docs-config file.");
